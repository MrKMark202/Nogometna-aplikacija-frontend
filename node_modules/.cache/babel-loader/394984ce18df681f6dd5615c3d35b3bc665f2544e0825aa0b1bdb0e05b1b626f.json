{"ast":null,"code":"import { auth, db, doc, getDoc, updateDoc } from \"@/firebase\";\nexport default {\n  name: \"passReset\",\n  data: () => ({\n    email: null,\n    form: false,\n    newPassword: null,\n    pin: null,\n    rules: {\n      email: v => !!(v || '').match(/@/) || 'Please enter a valid email',\n      length: len => v => (v || '').length >= len || `Invalid character length, required ${len}`,\n      password: v => !!(v || '').match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*(_|[^\\w])).+$/) || 'Password must contain an upper case letter, a numeric character, and a special character',\n      required: v => !!v || 'This field is required'\n    }\n  }),\n  methods: {\n    async verifyPIN() {\n      const userDoc = getDoc(doc(db, 'Users', this.email.toLowerCase())).then(docSnap => {\n        if (docSnap.exists()) {\n          console.log(\"Document data: \", docSnap.data()[\"PIN\"]);\n          this.savedPin = docSnap.data()[\"PIN\"];\n        } else {\n          console.log(\"No such document!\");\n        }\n      });\n      try {\n        if (this.pin === savedPin) {\n          this.pinVerified = true;\n          console.log('PIN verified.');\n        } else {\n          console.log('Invalid PIN.');\n        }\n      } catch (error) {\n        console.error('Error retrieving user data:', error);\n      }\n    },\n    async resetPass(auth) {\n      try {\n        const documentRef = doc(db, 'Users', this.email);\n        const newData = {};\n        await updateDoc(documentRef, newData);\n        console.log('Data updated successfully.');\n      } catch (error) {\n        console.error('Error updating data:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["auth","db","doc","getDoc","updateDoc","name","data","email","form","newPassword","pin","rules","v","match","length","len","password","required","methods","verifyPIN","userDoc","toLowerCase","then","docSnap","exists","console","log","savedPin","pinVerified","error","resetPass","documentRef","newData"],"sources":["src/views/passReset.vue"],"sourcesContent":["<template>\r\n\r\n    <div>\r\n        <div class=\"naslov2\">\r\n            <h1>Reset your password</h1>\r\n        </div>\r\n\r\n        <v-card\r\n            class=\"mx-auto\"\r\n            style=\"max-width: 500px; margin-top: 80px; margin-left: auto; margin-right:auto; padding: 30px;\"\r\n        >\r\n\r\n            <v-form\r\n                ref=\"form\"\r\n                v-model=\"form\"\r\n                style=\"margin-top: 20px;\"\r\n            >\r\n                <v-text-field\r\n                    v-model=\"email\"\r\n                    :rules=\"[rules.email, rules.required]\"\r\n                    filled\r\n                    color=\"black\"\r\n                    label=\"Email address\"\r\n                    style=\"min-height: 100px\"\r\n                    type=\"email\"\r\n                ></v-text-field>\r\n\r\n                <v-text-field\r\n                    v-model=\"newPassword\"\r\n                    :rules=\"[rules.password, rules.length(6), rules.required]\"\r\n                    filled\r\n                    color=\"black\"\r\n                    label=\"New password\"\r\n                    style=\"min-height: 100px\"\r\n                    type=\"password\"\r\n                ></v-text-field>\r\n\r\n                <v-text-field\r\n                    type=\"password\"\r\n                    v-model=\"pin\"\r\n                    filled\r\n                    color=\"black\"\r\n                    label=\"Insert your PIN\"\r\n                    style=\"min-height: 100px\"\r\n                    :rules=\"[rules.length(4), rules.required]\"\r\n                    counter=\"4\"\r\n                ></v-text-field>\r\n\r\n                <v-card-actions>\r\n\r\n                    <v-btn\r\n                        class=\"white--text\"\r\n                        color=\"black\"\r\n                        depressed\r\n                        @click=\"verifyPIN\"\r\n                    >\r\n                    Check PIN!\r\n                    </v-btn>\r\n\r\n                    <v-btn\r\n                        class=\"white--text\"\r\n                        color=\"black\"\r\n                        depressed\r\n                        @click=\"resetPass\"\r\n                    >\r\n                    Reset!\r\n                    </v-btn>\r\n                </v-card-actions>\r\n            </v-form>\r\n        </v-card>\r\n    </div>\r\n</template>\r\n    \r\n<script>\r\nimport {auth, db, doc, getDoc, updateDoc } from \"@/firebase\";\r\n    export default {\r\n        name: \"passReset\",\r\n        data: () => ({   \r\n            email: null,\r\n            form: false,\r\n            newPassword: null,\r\n            pin: null,\r\n            rules: {\r\n                email: v => !!(v || '').match(/@/) || 'Please enter a valid email',\r\n                length: len => v => (v || '').length >= len || `Invalid character length, required ${len}`,\r\n                password: v => !!(v || '').match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*(_|[^\\w])).+$/) ||\r\n                'Password must contain an upper case letter, a numeric character, and a special character',\r\n                required: v => !!v || 'This field is required',\r\n            },  \r\n        }),\r\n\r\n        methods: {\r\n            async verifyPIN() {\r\n\r\n                const userDoc = getDoc(doc(db, 'Users', this.email.toLowerCase())).then(docSnap => {\r\n                    if (docSnap.exists()) {\r\n                        console.log(\"Document data: \", docSnap.data()[\"PIN\"]);\r\n                        this.savedPin = docSnap.data()[\"PIN\"]\r\n                    } else {\r\n                        console.log(\"No such document!\");\r\n                    }\r\n                    });\r\n\r\n                try {\r\n                    if (this.pin === savedPin) {\r\n                        this.pinVerified = true;\r\n                        console.log('PIN verified.');\r\n                    } else {\r\n                        console.log('Invalid PIN.');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error retrieving user data:', error);\r\n                }\r\n        },\r\n            async resetPass(auth) {\r\n                try {\r\n                    const documentRef = doc(db, 'Users', this.email);\r\n                    const newData = {\r\n                \r\n            };\r\n            await updateDoc(documentRef, newData);\r\n            console.log('Data updated successfully.');\r\n            } catch (error) {\r\n            console.error('Error updating data:', error);\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>\r\n    \r\n    <style>\r\n    .naslov2\r\n      {\r\n        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n        text-align: center;\r\n        color: white;\r\n        margin-top:120px;\r\n      }\r\n      \r\n    </style>"],"mappings":"AA0EA,SAAAA,IAAA,EAAAC,EAAA,EAAAC,GAAA,EAAAC,MAAA,EAAAC,SAAA;AACA;EACAC,IAAA;EACAC,IAAA,EAAAA,CAAA;IACAC,KAAA;IACAC,IAAA;IACAC,WAAA;IACAC,GAAA;IACAC,KAAA;MACAJ,KAAA,EAAAK,CAAA,OAAAA,CAAA,QAAAC,KAAA;MACAC,MAAA,EAAAC,GAAA,IAAAH,CAAA,KAAAA,CAAA,QAAAE,MAAA,IAAAC,GAAA,0CAAAA,GAAA;MACAC,QAAA,EAAAJ,CAAA,OAAAA,CAAA,QAAAC,KAAA,yDACA;MACAI,QAAA,EAAAL,CAAA,MAAAA,CAAA;IACA;EACA;EAEAM,OAAA;IACA,MAAAC,UAAA;MAEA,MAAAC,OAAA,GAAAjB,MAAA,CAAAD,GAAA,CAAAD,EAAA,gBAAAM,KAAA,CAAAc,WAAA,KAAAC,IAAA,CAAAC,OAAA;QACA,IAAAA,OAAA,CAAAC,MAAA;UACAC,OAAA,CAAAC,GAAA,oBAAAH,OAAA,CAAAjB,IAAA;UACA,KAAAqB,QAAA,GAAAJ,OAAA,CAAAjB,IAAA;QACA;UACAmB,OAAA,CAAAC,GAAA;QACA;MACA;MAEA;QACA,SAAAhB,GAAA,KAAAiB,QAAA;UACA,KAAAC,WAAA;UACAH,OAAA,CAAAC,GAAA;QACA;UACAD,OAAA,CAAAC,GAAA;QACA;MACA,SAAAG,KAAA;QACAJ,OAAA,CAAAI,KAAA,gCAAAA,KAAA;MACA;IACA;IACA,MAAAC,UAAA9B,IAAA;MACA;QACA,MAAA+B,WAAA,GAAA7B,GAAA,CAAAD,EAAA,gBAAAM,KAAA;QACA,MAAAyB,OAAA,IAEA;QACA,MAAA5B,SAAA,CAAA2B,WAAA,EAAAC,OAAA;QACAP,OAAA,CAAAC,GAAA;MACA,SAAAG,KAAA;QACAJ,OAAA,CAAAI,KAAA,yBAAAA,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}