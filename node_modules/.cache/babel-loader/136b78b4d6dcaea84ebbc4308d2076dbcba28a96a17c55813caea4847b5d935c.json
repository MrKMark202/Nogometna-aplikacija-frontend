{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Auth } from '@/components/registracija';\nimport axios from 'axios';\nexport default {\n  data: () => ({\n    auth: Auth.state,\n    userData: [],\n    zastavica: false,\n    zastavica2: false,\n    profilna: null,\n    password: null,\n    rules: {\n      length: len => v => (v || '').length >= len || `Invalid character length, required ${len}`,\n      password: v => !!(v || '').match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*(_|[^\\w])).+$/) || 'Password must contain an upper case letter, a numeric character, and a special character',\n      required: v => !!v || 'This field is required'\n    }\n  }),\n  mounted() {\n    this.dohvatiKorisnika();\n  },\n  methods: {\n    async dohvatiKorisnika() {\n      try {\n        const userEmail = this.auth.userEmail;\n        const response = await axios.get(`http://localhost:10000/api/user/dohvat?email=${userEmail}`);\n        if (response.status !== 200) {\n          throw new Error('Network response was not ok');\n        }\n        this.userData = response.data;\n      } catch (error) {\n        console.error('Greška prilikom dohvaćanja podataka korisnika:', error);\n      }\n    },\n    async updateUser() {\n      let response = await axios.patch(\"http://localhost:10000/api/user/update/podaci\", {\n        profilna: this.profilna,\n        email: this.auth.userEmail\n      });\n      window.location.reload();\n    },\n    async updateUserLozinka() {\n      let response = await axios.patch(\"http://localhost:10000/api/user/update/lozinka\", {\n        lozinka: this.password,\n        email: this.auth.userEmail\n      });\n      this.signOut();\n    },\n    async deleteUser() {\n      if (confirm(\"Jeste li sigurni da želite izbridati ligu\")) {\n        let response = await axios.patch(\"http://localhost:10000/api/user/delete\", {\n          userEmail: this.auth.userEmail\n        });\n        this.signOut();\n      }\n    },\n    async signOut() {\n      Auth.logout();\n      this.$router.push({\n        path: \"/Login\"\n      });\n    },\n    funkcijaTrue() {\n      this.zastavica = true;\n    },\n    funkcijaTrue2() {\n      this.zastavica2 = true;\n    },\n    funkcijaFalse() {\n      this.zastavica = false;\n    },\n    funkcijaFalse2() {\n      this.zastavica2 = false;\n    }\n  }\n};","map":{"version":3,"names":["Auth","axios","data","auth","state","userData","zastavica","zastavica2","profilna","password","rules","length","len","v","match","required","mounted","dohvatiKorisnika","methods","userEmail","response","get","status","Error","error","console","updateUser","patch","email","window","location","reload","updateUserLozinka","lozinka","signOut","deleteUser","confirm","logout","$router","push","path","funkcijaTrue","funkcijaTrue2","funkcijaFalse","funkcijaFalse2"],"sources":["src/views/userSettings.vue"],"sourcesContent":["<template>\r\n    <div class=\"obrub\">\r\n        \r\n        <h3 class=\"tekst\" style=\"text-align: center; font-size: 70px !important; margin-bottom: 50px;\">Korisničke postavke</h3>\r\n        \r\n        <v-img :src=\"auth.userProfilePicture\" class=\"profilna\"></v-img>\r\n\r\n        <h3 class=\"tekst\">Ime</h3>\r\n        <h3 class=\"podaci\">{{ userData.ime }}</h3>\r\n\r\n        <h3 class=\"tekst\">Prezime</h3>\r\n        <h3 class=\"podaci\">{{ userData.prezime }}</h3>\r\n\r\n        <h3 class=\"tekst\">Datum rođenja</h3>\r\n        <h3 class=\"podaci\">{{ userData.datumRodenja}}</h3>\r\n\r\n        <h3 class=\"tekst\">Email korisnika</h3>\r\n        <h3 class=\"podaci\">{{ userData.email }}</h3>\r\n\r\n        <div class=\"center\" v-if=\"this.zastavica == true\">\r\n\r\n            <h3 class=\"tekst\" style=\"text-align: center; margin-top: 30px;\">Ažuriraj profil</h3>\r\n\r\n            <v-text-field\r\n                style=\"background-color: green; margin-top: 30px; margin-bottom: 20px; width: 100%;\"  \r\n                v-model=\"profilna\"\r\n                label=\"Nova profilna slika\"\r\n            ></v-text-field>\r\n\r\n            <v-btn class=\"btn_style\" @click=\"updateUser(), funkcijaFalse()\">Ažuriraj profil</v-btn>\r\n            <v-btn class=\"btn_style\" @click=\"funkcijaFalse()\">Odustani</v-btn>\r\n        </div>\r\n\r\n        <div class=\"center\" v-if=\"this.zastavica2 == true\">\r\n\r\n            <h3 class=\"tekst\" style=\"text-align: center; margin-top: 30px;\">Promijeni lozinku</h3>\r\n\r\n            <v-text-field\r\n                v-model=\"password\"\r\n                :rules=\"[rules.password, rules.length(6), rules.required]\"\r\n                filled\r\n                color=\"black\"\r\n                counter=\"6\"\r\n                label=\"Nova lozinka\"\r\n                style=\"min-height: 100px; width: 50%;\"\r\n                type=\"password\"\r\n            ></v-text-field>\r\n\r\n            <v-btn class=\"btn_style\" @click=\"funkcijaFalse2(), updateUserLozinka()\">Promijeni lozinku</v-btn>\r\n            <v-btn class=\"btn_style\" @click=\"funkcijaFalse2()\">Odustani</v-btn>\r\n        </div>\r\n\r\n        <div class=\"center\" v-if=\"this.zastavica == false && this.zastavica2 == false\">\r\n            <v-btn class=\"btn_style\" @click=\"funkcijaTrue()\">Ažuriraj profil</v-btn>\r\n            <v-btn class=\"btn_style\" @click=\"funkcijaTrue2()\">Promijeni lozinku</v-btn>\r\n            <v-btn class=\"btn_style\" @click=\"deleteUser()\" style=\"background-color: red !important; color: white; font-size: 30px;\">Izbriši račun</v-btn>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import { Auth } from '@/components/registracija'\r\n    import axios from 'axios';\r\n\r\n    export default {\r\n        data: () => ({\r\n            auth: Auth.state,\r\n            userData: [],\r\n            zastavica: false,\r\n            zastavica2: false,\r\n            profilna: null,\r\n            password: null,\r\n            rules: {\r\n                length: len => v => (v || '').length >= len || `Invalid character length, required ${len}`,\r\n                password: v => !!(v || '').match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*(_|[^\\w])).+$/) ||\r\n                'Password must contain an upper case letter, a numeric character, and a special character',\r\n                required: v => !!v || 'This field is required',\r\n            },\r\n        }),\r\n\r\n        mounted() {\r\n            this.dohvatiKorisnika();\r\n        },\r\n\r\n        methods: {\r\n           async dohvatiKorisnika() {\r\n                try {\r\n                const userEmail = this.auth.userEmail;\r\n                const response = await axios.get(`http://localhost:10000/api/user/dohvat?email=${userEmail}`);\r\n                if (response.status !== 200) {\r\n                    throw new Error('Network response was not ok');\r\n                } \r\n                this.userData = response.data\r\n                } catch (error) {\r\n                    console.error('Greška prilikom dohvaćanja podataka korisnika:', error);\r\n                }\r\n            },\r\n\r\n            async updateUser() {\r\n                let response = await axios.patch(\"http://localhost:10000/api/user/update/podaci\", {\r\n                    profilna: this.profilna,\r\n                    email: this.auth.userEmail\r\n                })\r\n                window.location.reload();\r\n            },\r\n\r\n            async updateUserLozinka() {\r\n                let response = await axios.patch(\"http://localhost:10000/api/user/update/lozinka\", {\r\n                    lozinka: this.password,\r\n                    email: this.auth.userEmail\r\n                })\r\n                this.signOut();\r\n            },\r\n\r\n            async deleteUser() {\r\n                if(confirm(\"Jeste li sigurni da želite izbridati ligu\")) {\r\n                    let response = await axios.patch(\"http://localhost:10000/api/user/delete\", {\r\n                        userEmail: this.auth.userEmail\r\n                    })\r\n                    this.signOut();\r\n                }\r\n            },\r\n\r\n            async signOut() {\r\n                Auth.logout();\r\n                this.$router.push({path: \"/Login\"});\r\n            },\r\n\r\n            funkcijaTrue() {\r\n                this.zastavica = true;\r\n            },\r\n\r\n            funkcijaTrue2() {\r\n                this.zastavica2 = true;\r\n            },\r\n\r\n            funkcijaFalse() {\r\n                this.zastavica = false;\r\n            },\r\n\r\n            funkcijaFalse2() {\r\n                this.zastavica2 = false;\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n</script>\r\n<style scoped>\r\n    .obrub\r\n    {\r\n        border: 2px solid white;\r\n        background-color: white;\r\n        padding: 50px;\r\n        margin-left: 20%;\r\n        margin-right: 20%;\r\n        margin-top: 100px; \r\n    }\r\n\r\n    .profilna\r\n    {\r\n        width: 200px;\r\n        height: 200px;\r\n        border-radius: 50%;\r\n        background-color: Green; \r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        \r\n    }\r\n\r\n    .tekst\r\n    {\r\n        color: black;\r\n        font-size: 50px;\r\n        margin-top: 10px;\r\n    }\r\n\r\n    .podaci\r\n    {\r\n        color: black;\r\n        font-size: 30px;\r\n        margin-top: 10px;\r\n        border: 2px green double;\r\n    }\r\n\r\n    .btn_style \r\n    {\r\n        background-color: green !important;\r\n        color: white !important;\r\n        font-weight: bold;\r\n        margin-top: 30px;\r\n        font-size: 30px;\r\n    }\r\n\r\n    .center\r\n    {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n    }\r\n</style>"],"mappings":";AA4DA,SAAAA,IAAA;AACA,OAAAC,KAAA;AAEA;EACAC,IAAA,EAAAA,CAAA;IACAC,IAAA,EAAAH,IAAA,CAAAI,KAAA;IACAC,QAAA;IACAC,SAAA;IACAC,UAAA;IACAC,QAAA;IACAC,QAAA;IACAC,KAAA;MACAC,MAAA,EAAAC,GAAA,IAAAC,CAAA,KAAAA,CAAA,QAAAF,MAAA,IAAAC,GAAA,0CAAAA,GAAA;MACAH,QAAA,EAAAI,CAAA,OAAAA,CAAA,QAAAC,KAAA,yDACA;MACAC,QAAA,EAAAF,CAAA,MAAAA,CAAA;IACA;EACA;EAEAG,QAAA;IACA,KAAAC,gBAAA;EACA;EAEAC,OAAA;IACA,MAAAD,iBAAA;MACA;QACA,MAAAE,SAAA,QAAAhB,IAAA,CAAAgB,SAAA;QACA,MAAAC,QAAA,SAAAnB,KAAA,CAAAoB,GAAA,iDAAAF,SAAA;QACA,IAAAC,QAAA,CAAAE,MAAA;UACA,UAAAC,KAAA;QACA;QACA,KAAAlB,QAAA,GAAAe,QAAA,CAAAlB,IAAA;MACA,SAAAsB,KAAA;QACAC,OAAA,CAAAD,KAAA,mDAAAA,KAAA;MACA;IACA;IAEA,MAAAE,WAAA;MACA,IAAAN,QAAA,SAAAnB,KAAA,CAAA0B,KAAA;QACAnB,QAAA,OAAAA,QAAA;QACAoB,KAAA,OAAAzB,IAAA,CAAAgB;MACA;MACAU,MAAA,CAAAC,QAAA,CAAAC,MAAA;IACA;IAEA,MAAAC,kBAAA;MACA,IAAAZ,QAAA,SAAAnB,KAAA,CAAA0B,KAAA;QACAM,OAAA,OAAAxB,QAAA;QACAmB,KAAA,OAAAzB,IAAA,CAAAgB;MACA;MACA,KAAAe,OAAA;IACA;IAEA,MAAAC,WAAA;MACA,IAAAC,OAAA;QACA,IAAAhB,QAAA,SAAAnB,KAAA,CAAA0B,KAAA;UACAR,SAAA,OAAAhB,IAAA,CAAAgB;QACA;QACA,KAAAe,OAAA;MACA;IACA;IAEA,MAAAA,QAAA;MACAlC,IAAA,CAAAqC,MAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QAAAC,IAAA;MAAA;IACA;IAEAC,aAAA;MACA,KAAAnC,SAAA;IACA;IAEAoC,cAAA;MACA,KAAAnC,UAAA;IACA;IAEAoC,cAAA;MACA,KAAArC,SAAA;IACA;IAEAsC,eAAA;MACA,KAAArC,UAAA;IACA;EAGA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}